package bankaccount;

import javax.swing.*;
import java.util.*;
import java.text.*;
/**
 *
 * @author khali
 */
public class TransactionOperation extends javax.swing.JDialog {
    private AccountOwner accountOwner;
    private Transaction transaction;
    private Bank bank;

    /** Creates new form TransactionOperation */
    public TransactionOperation(java.awt.Frame parent, boolean modal, AccountOwner accountOwner, Bank bank) {
        super(parent, modal);
        setLocationRelativeTo(parent);
        initComponents();
        this.bank = bank;
        this.accountOwner = accountOwner;
        transaction = null;
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AmountLabel = new javax.swing.JLabel();
        amountField = new javax.swing.JTextField();
        depositButton = new javax.swing.JButton();
        withdrawButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Operation");
        getContentPane().setLayout(new java.awt.GridLayout(3, 2, 5, 5));

        AmountLabel.setText("Amount");
        getContentPane().add(AmountLabel);

        amountField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                amountFieldKeyTyped(evt);
            }
        });
        getContentPane().add(amountField);

        depositButton.setText("Deposit");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });
        getContentPane().add(depositButton);

        withdrawButton.setText("Withdraw");
        withdrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawButtonActionPerformed(evt);
            }
        });
        getContentPane().add(withdrawButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose(); //close the popup window
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed
        double deposit = 0; //initialize variable
        if(amountField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please Enter deposit amount", "Invalid Input!", JOptionPane.WARNING_MESSAGE);
            return; // error occured; exit the method early
        } else {
            
            try{
            deposit = Double.parseDouble(amountField.getText()); //get value from textfield and "convert" as double
            accountOwner.getAccount().deposit(deposit); //call the method deposit in Account class
            
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Deposit amount must be a number", "Invalid Input!", JOptionPane.WARNING_MESSAGE);
                return; // error occured; exit the method early
            }
        }
        //get current date
        String transType = "Deposit", date;
        DateFormat df = new SimpleDateFormat("dd/MM/yy HH:mm");
        Calendar calObj = Calendar.getInstance();
        date = df.format(calObj.getTime());
        
        transaction = new Transaction(transType, deposit, date);
        //add the trasaction to arraylist
        bank.addTransaction(transaction);


        this.dispose();
    }//GEN-LAST:event_depositButtonActionPerformed

    private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawButtonActionPerformed
        double withdraw = 0;
        if(amountField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please Enter Withdraw amount", "Invalid Input!", JOptionPane.WARNING_MESSAGE);
            return; // error occured; exit the method early
        } else {
            
            try{
                withdraw = Double.parseDouble(amountField.getText()); //get value from textfield and "convert" as double
                accountOwner.getAccount().withdraw(withdraw); //call the method deposit in Account class
                
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Deposit amount must be a number", "Invalid Input!", JOptionPane.WARNING_MESSAGE);
                return; // error occured; exit the method early
            }
        }
        String transType = "Withdraw", date;
            DateFormat df = new SimpleDateFormat("dd/MM/yy HH:mm");
            Calendar calObj = Calendar.getInstance();
            date = df.format(calObj.getTime());
            
            transaction = new Transaction(transType, withdraw, date);
            //add the trasaction to arraylist
            bank.addTransaction(transaction);
            //System.out.println(transaction);
            
            this.dispose(); 
    }//GEN-LAST:event_withdrawButtonActionPerformed

    private void amountFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountFieldKeyTyped
        //This allows only digits 0-9 to be entered
        char enter = evt.getKeyChar();
        if(!(Character.isDigit(enter))){
            evt.consume();
        }
    }//GEN-LAST:event_amountFieldKeyTyped


    Transaction getTransaction() {
        return transaction;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AmountLabel;
    private javax.swing.JTextField amountField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton depositButton;
    private javax.swing.JButton withdrawButton;
    // End of variables declaration//GEN-END:variables

}
